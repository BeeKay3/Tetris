#+title: Documentation of Tetris Project SEM II Project

* Preprocessors
This project uses SDL so that has been included. fstream is for file i/o functions because we define our initial game state in a file called initial_state.txt inside the game_states folder. ctime is to get current time for file name. string is there because the current time is returned as int but we need it as a string.
#+begin_src C
#include<SDL2/SDL.h>
#include<fstream>
#include<ctime>
#include<string>

using namespace std;
#+end_src

* Initial Grid
This function defines our initial game grid by taking input from the initial_state file.
#+begin_src C
void initial_state(int grid[20][10]) {
  fstream init_state;

  init_state.open("./game_states/initial_state.txt", ios::in);

  for(int i = 0; i < 20; i++) {
    for(int j = 0; j< 10; j++) {
      init_state >> grid[i][j];
      if(init_state.eof()){break;}
    }
    if(init_state.eof()){break;}
  }
  init_state.close();
}
#+end_src

* Creating game file
Each game is recorded in the form of a txt file. This function creates the .txt file with file name in the format "year month month_day hour min.txt".
Here the to_string() function is a function from <string> that converts all types of int to string.
#+begin_src C
void create_log_file(){
  fstream log;
  time_t t = time(0);
  tm *now = localtime(&t);
  string file_name = "./game_states/" + to_string(now->tm_year + 1900) + to_string(now->tm_mon + 1) + to_string(now->tm_mday) + to_string(now->tm_hour) + to_string(now->tm_min) + ".txt";
  log.open(file_name, ios::out);
  log.close();
}
#+end_src

* The main function starts here
#+begin_src C
int main(int argc, char * argv[]) {
  int grid[20][10];

  initial_state(grid);
  create_log_file();

  SDL_Window *window = SDL_CreateWindow("Tetris", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 600, 800, SDL_WINDOW_SHOWN);
  bool run = true;
  SDL_Event e;
  while (run) {
    if (SDL_PollEvent(&e)) {
      if (e.type == SDL_QUIT) {
        run = false;
      }
    }
  }

  SDL_DestroyWindow(window);
  SDL_Quit();
  return 0;
}
#+end_src
